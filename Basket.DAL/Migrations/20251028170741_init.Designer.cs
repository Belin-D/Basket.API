// <auto-generated />
using System;
using Basket.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Basket.DAL.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20251028170741_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Adresse_TerrainEquipe", b =>
                {
                    b.Property<int>("EquipesId")
                        .HasColumnType("int");

                    b.Property<int>("TerrainsId")
                        .HasColumnType("int");

                    b.HasKey("EquipesId", "TerrainsId");

                    b.HasIndex("TerrainsId");

                    b.ToTable("EquipeTerrains", (string)null);
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Adresse_Terrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BoitePostal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Commune")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Rue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdressesTerrains");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Calendrier_Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Adresse_TerrainId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMatch")
                        .HasColumnType("date");

                    b.Property<int>("EquipeLocalId")
                        .HasColumnType("int");

                    b.Property<int>("EquipeVisiteurId")
                        .HasColumnType("int");

                    b.Property<bool>("ForfaitDomicile")
                        .HasColumnType("bit");

                    b.Property<bool>("ForfaitVisiteur")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("HeureMatch")
                        .HasColumnType("time");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.Property<int>("ScoreDomicile")
                        .HasColumnType("int");

                    b.Property<int>("ScoreVisiteur")
                        .HasColumnType("int");

                    b.Property<int>("typeMatch")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Adresse_TerrainId");

                    b.HasIndex("EquipeLocalId");

                    b.HasIndex("EquipeVisiteurId");

                    b.HasIndex("SaisonId");

                    b.ToTable("CalendriersMatchs");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Categorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Classement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateMiseAJour")
                        .HasColumnType("datetime2");

                    b.Property<int>("Defaites")
                        .HasColumnType("int");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<int>("Forfaits")
                        .HasColumnType("int");

                    b.Property<int>("MatchsNuls")
                        .HasColumnType("int");

                    b.Property<int>("PointsContre")
                        .HasColumnType("int");

                    b.Property<int>("PointsPour")
                        .HasColumnType("int");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.Property<int>("Victoires")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("EquipeId");

                    b.HasIndex("SaisonId");

                    b.ToTable("Classements");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Coach", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Anniversaire")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Coachs");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Equipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategorieId")
                        .HasColumnType("int");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("CoachId");

                    b.HasIndex("SaisonId");

                    b.ToTable("Equipes");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Evenement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdresseTerrainId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateEvenement")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("HeureEvenement")
                        .HasColumnType("time");

                    b.Property<int>("NbrPlace")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Prix")
                        .HasColumnType("int");

                    b.Property<int>("SaisonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdresseTerrainId");

                    b.HasIndex("SaisonId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Joueur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Anniversaire")
                        .HasColumnType("datetime2");

                    b.Property<int>("EquipeId")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EquipeId");

                    b.ToTable("Joueurs");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Reservation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateReservation")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvenementId")
                        .HasColumnType("int");

                    b.Property<int>("NbrPlaces")
                        .HasColumnType("int");

                    b.Property<bool>("Statut")
                        .HasColumnType("bit");

                    b.Property<int>("UtilisateurId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Saison", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Saisons");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Utilisateur", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Roles")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs");
                });

            modelBuilder.Entity("Adresse_TerrainEquipe", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Equipe", null)
                        .WithMany()
                        .HasForeignKey("EquipesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Adresse_Terrain", null)
                        .WithMany()
                        .HasForeignKey("TerrainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Calendrier_Match", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Adresse_Terrain", "Adresse_Terrain")
                        .WithMany()
                        .HasForeignKey("Adresse_TerrainId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Basket.DOMAINE.Models.Equipe", "EquipeLocal")
                        .WithMany()
                        .HasForeignKey("EquipeLocalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Equipe", "EquipeVisiteur")
                        .WithMany()
                        .HasForeignKey("EquipeVisiteurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Saison", "Saison")
                        .WithMany()
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adresse_Terrain");

                    b.Navigation("EquipeLocal");

                    b.Navigation("EquipeVisiteur");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Classement", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Categorie", "Categorie")
                        .WithMany()
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Equipe", "Equipe")
                        .WithMany()
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Saison", "Saison")
                        .WithMany()
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Equipe");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Equipe", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Categorie", "Categorie")
                        .WithMany("Equipes")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Coach", "Coach")
                        .WithMany("Equipes")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Saison", "Saison")
                        .WithMany("Equipes")
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Coach");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Evenement", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Adresse_Terrain", "AdresseTerrain")
                        .WithMany()
                        .HasForeignKey("AdresseTerrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Saison", "Saison")
                        .WithMany()
                        .HasForeignKey("SaisonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdresseTerrain");

                    b.Navigation("Saison");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Joueur", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Equipe", "Equipe")
                        .WithMany("Joueurs")
                        .HasForeignKey("EquipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipe");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Reservation", b =>
                {
                    b.HasOne("Basket.DOMAINE.Models.Evenement", "Evenement")
                        .WithMany()
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Basket.DOMAINE.Models.Utilisateur", "Utilisateur")
                        .WithMany("Reservations")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Categorie", b =>
                {
                    b.Navigation("Equipes");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Coach", b =>
                {
                    b.Navigation("Equipes");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Equipe", b =>
                {
                    b.Navigation("Joueurs");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Saison", b =>
                {
                    b.Navigation("Equipes");
                });

            modelBuilder.Entity("Basket.DOMAINE.Models.Utilisateur", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
